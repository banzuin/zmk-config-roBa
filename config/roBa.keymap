#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        reopentab {
            bindings = <&kp LS(LG(T))>;
            key-positions = <18 19>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        closewindow {
            bindings = <&kp LG(R)>;
            key-positions = <20 21>;
        };

        reload {
            bindings = <&kp LG(W)>;
            key-positions = <7 8>;
        };

        tabcom {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        esccom {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW      &kp LC(TAB)              &kp TAB                                      &none        &kp LG(LC(F))  &mo 5      &mo 5      &kp DELETE
&kp HOME        &kp LEFT_ARROW          &lt 5 DOWN_ARROW  &kp RIGHT_ARROW          &kp END      &kp K_MUTE       &none          &mkp MB4     &mkp MB1       &mkp MB3   &mkp MB2   &mkp MB5
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp DOWN_ARROW    &kp LG(LS(RIGHT_ARROW))  &none        &none            &none          &kp LG(A)    &kp LG(V)      &kp LG(C)  &kp RG(X)  &kp LG(Z)
&to 5           &mo 1                   &mo 2             &lt 5 LANG2              &lt 6 SPACE  &lt 5 LANG1      &kp BACKSPACE  &lt 5 ENTER                                       &to 0
            >;

            sensor-bindings = <&inc_dec_kp K_VOL_UP K_VOL_DN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E     &kp R        &kp T                                           &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LCTRL A       &kp S         &kp D     &kp F        &kp G   &none                 &kp SINGLE_QUOTE  &kp H        &kp J  &kp K      &kp L    &mt RCTRL MINUS
&mt LEFT_SHIFT V  &kp X         &kp C     &kp Z        &kp B   &kp COLON             &kp SEMICOLON     &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&trans            &kp LEFT_ALT  &kp LGUI  &lt 7 LANG2  &trans  &lt 8 LANGUAGE_1      &trans            &lt 7 ENTER                             &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                             &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp AT    &kp EXCLAMATION   &mkp MB1           &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp PIPE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans    &trans                                                                     &trans
            >;
        };

        layer_7 {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW      &kp LC(TAB)              &kp TAB                                      &none        &kp F7     &kp LG(W)  &mo 5      &kp DELETE
&kp HOME        &kp LEFT_ARROW          &lt 5 DOWN_ARROW  &kp RIGHT_ARROW          &kp END      &kp K_MUTE       &none          &mkp MB4     &mkp MB1   &mkp MB3   &mkp MB2   &mkp MB5
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp DOWN_ARROW    &kp LG(LS(RIGHT_ARROW))  &none        &none            &none          &kp LG(A)    &kp LG(V)  &kp LG(C)  &kp RG(X)  &kp LG(Z)
&to 5           &mo 1                   &mo 2             &lt 7 LANG2              &lt 6 SPACE  &lt 5 LANG1      &kp BACKSPACE  &lt 5 ENTER                                   &to 0
            >;

            sensor-bindings = <&inc_dec_kp K_VOL_UP K_VOL_DN>;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
